
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always


stages:
  - lint
  - page_checks
  - location_test


lint:
  stage: lint
  image: python:3.8
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
  script:
    - apt-get update; apt-get -y install python3-pip
    - pip install tox
    - tox -e lint

.setup-env: &setup-env
    - apt-get update
    - apt-get install -y unzip curl software-properties-common  vim git python3-pip python3
    - curl https://dl-ssl.google.com/linux/linux_signing_key.pub -o /tmp/google.pub
    - cat /tmp/google.pub | apt-key add -
    - echo 'deb http://dl.google.com/linux/chrome/deb/ stable main' > /etc/apt/sources.list.d/google.list
    - mkdir -p /usr/share/desktop-directories
    - apt-get -y update && apt-get install -y google-chrome-stable
    - dpkg-divert --add --rename --divert /opt/google/chrome/google-chrome.real /opt/google/chrome/google-chrome
    - echo -e "#!/bin/bash\nexec /opt/google/chrome/google-chrome.real --no-sandbox --disable-setuid-sandbox \"\$@\"" > /opt/google/chrome/google-chrome
    - chmod 755 /opt/google/chrome/google-chrome
    - google-chrome --version
    - wget https://chromedriver.storage.googleapis.com/91.0.4472.101/chromedriver_linux64.zip && unzip chromedriver_linux64.zip
    - export PATH=`pwd`:${PATH}
    - pip install -r requirements.txt
    - pip install -i https://bbpteam.epfl.ch/repository/devpi/simple .


check_pages_sscx:
  stage: page_checks
  rules:
    - if: $PIPELINE_SELECT=="weekly"
  image: python:3.8-buster
  variables:
    linkok: "https://hooks.slack.com/services/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"
    linknok: "https://hooks.slack.com/services/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"
  script:
    - *setup-env
    - exit_code=0
    - pagechecker  --folder resources/SSCX_Portal/  --domain "https://bbp.epfl.ch/sscx-portal/" -H "Authorization:Basic c3NjeDphZXc0b29TaA==" -n 5 || exit_code=$?
    - slack_reporter --ok_url $linkok --err_url $linknok --name "SSCX Page Check" --filename pagechecker.log --status $exit_code

check_dom_sscx:
  stage: page_checks
  rules:
    - if: $PIPELINE_SELECT=="weekly"
  image: python:3.8-buster
  variables:
    linkok: "https://hooks.slack.com/services/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"
    linknok: "https://hooks.slack.com/services/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"
  script:
    - *setup-env
    - exit_code=0
    - page_dom_check -n 5 -p resources/sscx_dom_check.json  || exit_code=$?
    - slack_reporter --ok_url $linkok --err_url $linknok --name "SSCX Dom Check" --filename page_dom_check.log --status $exit_code

check_links:
  stage: page_checks
  rules:
    - if: $PIPELINE_SELECT=="weekly"
  image: python:3.8-buster
  variables:
    page: "https://portal.bluebrain.epfl.ch/"
    linkok: "https://hooks.slack.com/services/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"
    linknok: "https://hooks.slack.com/services/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"
  script:
    # Install required packages
    - pip install beautifulsoup4 pylinkvalidator click requests
    - pip install -i https://bbpteam.epfl.ch/repository/devpi/simple .
    - export http_proxy=http://bbpproxy.epfl.ch:80/
    - export https_proxy=http://bbpproxy.epfl.ch:80/
    - export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
    # perform the check
    - exit_code=0
    - pylinkvalidate.py -d 0 -o linkreport.txt -P $page || exit_code=$?
    # and create the report to slack
    - python validate_converter.py linkreport.txt > report.txt
    - slack_reporter --ok_url $linkok --err_url $linknok --name "BBP Portal Links" --filename report.txt --status $exit_code

location_testing_sscx:
  stage: location_test
#  rules:
#    - if: $PIPELINE_SELECT=="daily"
  image: python:3.8-buster
  script:
    - pip install click requests
    - pip install -i https://bbpteam.epfl.ch/repository/devpi/simple .
    - location_test -p check-pages/resources/perf_sscx.json --test
