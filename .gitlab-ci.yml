
workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

stages:
  - lint
  - page_checks


lint:
  stage: lint
  image: python:3.8
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - when: on_success
  script:
    - pwd
    #- make lint

# check_sscx:
#   stage: page_checks
#   image: python:3.8-buster
#   script:
#     - apt-get update
#     - apt-get install -y unzip curl software-properties-common  vim git python3-pip python3
#     - curl https://dl-ssl.google.com/linux/linux_signing_key.pub -o /tmp/google.pub
#     - cat /tmp/google.pub | apt-key add -
#     - rm /tmp/google.pub
#     - echo 'deb http://dl.google.com/linux/chrome/deb/ stable main' > /etc/apt/sources.list.d/google.list
#     - mkdir -p /usr/share/desktop-directories
#     - apt-get -y update && apt-get install -y google-chrome-stable
#     - dpkg-divert --add --rename --divert /opt/google/chrome/google-chrome.real /opt/google/chrome/google-chrome
#     - echo -e "#!/bin/bash\nexec /opt/google/chrome/google-chrome.real --no-sandbox --disable-setuid-sandbox \"\$@\"" > /opt/google/chrome/google-chrome
#     - chmod 755 /opt/google/chrome/google-chrome
#     - google-chrome --version
#     - pip install -r requirements.txt
#     - export PATH=`pwd`/bin:${PATH}
#     - python pagechecker.py  --folder resources/SSCX_Portal/  --domain "https://bbp.epfl.ch/sscx-portal/" -H "Authorization:Basic c3NjeDphZXc0b29TaA==" -n 5

check_portal:
  stage: page_checks
  image: python:3.8-buster
  variables:
    page: "https://portal.bluebrain.epfl.ch/"
    linkok: "https://hooks.slack.com/services/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:"
    linknok: " https://hooks.slack.com/services/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"
  script:
    # Install required packages
    - pip install beautifulsoup4 pylinkvalidator click requests
    - export http_proxy=http://bbpproxy.epfl.ch:80/
    - export https_proxy=http://bbpproxy.epfl.ch:80/
    - export no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com"
    # perform the check
    - pylinkvalidate.py -d 0 -o linkreport.txt -P $page || exit_code=$?
    # and create the report to slack
    - python validate_converter.py linkreport.txt > report.txt
    - python slack_reporter.py --ok_url $linkok --err_url $linknok --name "Portal Test" --file report.txt --status $exit_code
